[{"/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/pages/VideogamesDetails.jsx":"1"},{"size":5288,"mtime":1654527899061,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"7"},"14agfg7","/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/pages/VideogamesDetails.jsx",["8","9"],[],"import React, { useEffect, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport {\n  listGamesDetailsService,\n  listGamesTrailersService,\n} from \"../services/games.services\";\n\n// Hemos instalado Markup de Interweave con npm i interweave. Convierte strings de html en strings jsx.\nimport { Markup } from \"interweave\";\n\nfunction VideogamesDetails() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // Llamar a la API\n  //! 1. Estados\n  const [gameDetails, setGameDetails] = useState(null);\n  // TODO ---> Estado para los trailers\n  const [gameTrailer, setGameTrailers] = useState(null);\n\n  //! 2. Acceder al componentDidMount\n  // TODO ---> componentDidMount para los trailers debajo\n  useEffect(() => {\n    getVideogamesDetails();\n    getVideogamesTrailers();\n  }, []);\n\n  //! 3. Función que llama a la API y se comunica con componentDidMount\n  const getVideogamesDetails = async () => {\n    try {\n      // 1. Llamada a la API\n      const response = await listGamesDetailsService(id);\n      console.log(\"Games Details\", response.data);\n\n      // 2. Actualizamos el estado con la respuesta de la API.\n      setGameDetails(response.data);\n      console.log(\"response.data\", response.data);\n    } catch (error) {\n      navigate(\"/error\");\n    }\n  };\n\n  // TODO ---> Función de comunicación con la API para los trailers\n  const getVideogamesTrailers = async () => {\n    try {\n      const response = await listGamesTrailersService(id);\n      setGameTrailers(response.data);\n      console.log(\"Trailers and bullshit:\", response.data);\n    } catch (error) {\n      navigate(\"/error\");\n    }\n  };\n\n  //! 4. Crear efecto de Loading.\n  if (gameDetails === null) {\n    return (\n      <>\n        <h4>Cargando...</h4>\n        <PulseLoader color={\"rgb(0,0,0)\"} />\n      </>\n    );\n    // TODO ---> Lo mismo pero para los trailers\n  } else if (gameTrailer === null) {\n    return (\n      <>\n        <h4>Cargando...</h4>\n        <PulseLoader color={\"rgb(0,0,0)\"} />\n      </>\n    );\n  }\n\n  return (\n    <div>\n      {console.log(\"Cesar\", gameTrailer)}\n      <h3>Detalles del Videojuego</h3>\n      <hr />\n\n      <div key={gameDetails.id}>\n        {/* Imagen del juego */}\n        <img src={gameDetails.background_image} width={900} alt=\"Cover\" />\n        {/* <img\n          src={gameDetails.background_image_additional}\n          width={900}\n          alt=\"Cover\"\n        /> */}\n\n        {/* Formulario para añadir el juego a colecciones (conexión con User.Model) */}\n        <form>\n          <br />\n          <select name=\"select\" id=\"\">\n            <option value=\"\">Owned games</option>\n            <option value=\"\">Wished games</option>\n            <option value=\"\">Finished games</option>\n            <option value=\"\">Currently playing games</option>\n          </select> \n          <br /> <br />\n          <button>Submit</button>\n        </form>\n\n        {/* Nombre del juego */}\n        <h1>{gameDetails.name}</h1>\n\n        {/* Nombres alternativos del juego que vienen en array */}\n        {gameDetails.alternative_names.length !== 0 &&\n          gameDetails.alternative_names.map((eachTitle) => {\n            return (\n              <div>\n                <h3>Nombres alternativos:</h3>\n                <p>{eachTitle}</p>\n              </div>\n            );\n          })}\n\n        <h3>Desarrollador(es):</h3>\n        {/* Desarrolladores del juego (vienen en array.) */}\n        {gameDetails.publishers.length !== 0 &&\n          gameDetails.publishers.map((eachPublisher) => {\n            return (\n              <div>\n                <p>{eachPublisher.name}</p>\n              </div>\n            );\n          })}\n\n        <h3>Fecha de salida:</h3>\n        {/* Fecha de release. */}\n        <p>{gameDetails.released}</p>\n\n        <h3>Género(s):</h3>\n        {/* Géneros del juego que vienen en array */}\n        {gameDetails.genres.length !== 0 &&\n          gameDetails.genres.map((eachGenre) => {\n            return (\n              <div>\n                <p>{eachGenre.name}</p>\n              </div>\n            );\n          })}\n\n        <h3>Consola(s):</h3>\n        {/* Consolas en las que el juego está disponible (vienen en array de array) */}\n        {gameDetails.platforms.length !== 0 &&\n          gameDetails.platforms.map((eachPlatform) => {\n            return (\n              <div>\n                <p>{eachPlatform.platform.name}</p>\n              </div>\n            );\n          })}\n\n        <button>\n          <a href={gameDetails.website}>Ir a website</a>\n        </button>\n\n        <h3>Descripción:</h3>\n        {/* Descripción del juego */}\n        <Markup content={gameDetails.description} />\n\n        {/* ------------------------------------ */}\n\n        {/* Trailers del juego (vienen en array) */}\n        {gameTrailer.results.length !== 0 &&\n          gameTrailer.results.map((eachTrailer) => {\n            return (\n              <div key={eachTrailer.id}>\n                <h3>Trailers</h3>\n                <video width={900} controls src={eachTrailer.data.max} />\n\n                {/* <source src={eachTrailer.data.max} type=\"video/mp4\" /> */}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default VideogamesDetails;\n",{"ruleId":"10","severity":1,"message":"11","line":2,"column":10,"nodeType":"12","messageId":"13","endLine":2,"endColumn":14},{"ruleId":"14","severity":1,"message":"15","line":27,"column":6,"nodeType":"16","endLine":27,"endColumn":8,"suggestions":"17"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getVideogamesDetails' and 'getVideogamesTrailers'. Either include them or remove the dependency array.","ArrayExpression",["18"],{"desc":"19","fix":"20"},"Update the dependencies array to be: [getVideogamesDetails, getVideogamesTrailers]",{"range":"21","text":"22"},[881,883],"[getVideogamesDetails, getVideogamesTrailers]"]