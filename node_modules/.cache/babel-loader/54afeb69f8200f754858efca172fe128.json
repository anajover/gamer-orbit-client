{"ast":null,"code":"var _jsxFileName = \"/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/pages/Videogames.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport axios from \"axios\";\nimport { listGamesService } from \"../services/games.services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Videogames() {\n  _s();\n\n  const navigate = useNavigate(); //* Pasos para llamar a la API e interactuar con el contenido\n  //! 1. Estados\n\n  const [allGames, setAllGames] = useState(null); //TODO ---> const [searchingData, setSearchingData] = useState(true)\n  //! 2. Acceder al componentDidMount\n\n  useEffect(() => {\n    getVideogames();\n  }, []); //! 3. Función que llama a la API y se comunica con componentDidMount().\n\n  const getVideogames = async () => {\n    try {\n      //* 1.) Llamada a Axios\n      const response = await listGamesService();\n      console.log(response);\n      console.log(\"Prueba rotura 2\"); //* 2.) Actualizamos el estado con la respuesta de la API. En Axios, siempre es el \"nombreDeLaConst.data\".\n\n      setAllGames(response.data); //TODO ---> 3.) Estado del spinner\n      //TODO ---> Invocación de la actualización de estado para activar el Loading\n      //TODO ---> setSearchingData(false)\n    } catch (error) {\n      navigate(\"/error\");\n    }\n  }; //! 4. Crear efecto de Loading.\n\n\n  if (allGames === null) {\n    return /*#__PURE__*/_jsxDEV(PacmanLoader, {\n      color: \"rgb(0,0,0)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  } // ************************ RENDER ************************\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allGames.results.map(eachGame => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: eachGame.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, eachGame.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Videogames, \"C3BJePqWHaJRWv6xx9OAB+uBMs0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Videogames;\nexport default Videogames;\n\nvar _c;\n\n$RefreshReg$(_c, \"Videogames\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","PacmanLoader","axios","listGamesService","Videogames","navigate","allGames","setAllGames","getVideogames","response","console","log","data","error","results","map","eachGame","name","id"],"sources":["/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/pages/Videogames.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport axios from \"axios\";\nimport { listGamesService } from \"../services/games.services\";\n\nfunction Videogames() {\n  const navigate = useNavigate();\n\n  //* Pasos para llamar a la API e interactuar con el contenido\n  //! 1. Estados\n  const [allGames, setAllGames] = useState(null);\n  //TODO ---> const [searchingData, setSearchingData] = useState(true)\n\n  //! 2. Acceder al componentDidMount\n  useEffect(() => {\n    getVideogames();\n  }, []);\n\n  //! 3. Función que llama a la API y se comunica con componentDidMount().\n  const getVideogames = async () => {\n    try {\n      //* 1.) Llamada a Axios\n      const response = await listGamesService();\n      console.log(response);\n      console.log(\"Prueba rotura 2\");\n\n      //* 2.) Actualizamos el estado con la respuesta de la API. En Axios, siempre es el \"nombreDeLaConst.data\".\n      setAllGames(response.data);\n\n      //TODO ---> 3.) Estado del spinner\n      //TODO ---> Invocación de la actualización de estado para activar el Loading\n      //TODO ---> setSearchingData(false)\n    } catch (error) {\n      navigate(\"/error\");\n    }\n  };\n\n  //! 4. Crear efecto de Loading.\n  if (allGames === null) {\n    return <PacmanLoader color={\"rgb(0,0,0)\"} />;\n  }\n\n  // ************************ RENDER ************************\n\n  return (\n    <div>\n      {allGames.results.map((eachGame) => {\n        return (\n          <div key={eachGame.id}>\n            <p>{eachGame.name}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Videogames;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;;;AAEA,SAASC,UAAT,GAAsB;EAAA;;EACpB,MAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADoB,CAGpB;EACA;;EACA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC,CALoB,CAMpB;EAEA;;EACAD,SAAS,CAAC,MAAM;IACdU,aAAa;EACd,CAFQ,EAEN,EAFM,CAAT,CAToB,CAapB;;EACA,MAAMA,aAAa,GAAG,YAAY;IAChC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMN,gBAAgB,EAAvC;MACAO,OAAO,CAACC,GAAR,CAAYF,QAAZ;MACAC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAJE,CAMF;;MACAJ,WAAW,CAACE,QAAQ,CAACG,IAAV,CAAX,CAPE,CASF;MACA;MACA;IACD,CAZD,CAYE,OAAOC,KAAP,EAAc;MACdR,QAAQ,CAAC,QAAD,CAAR;IACD;EACF,CAhBD,CAdoB,CAgCpB;;;EACA,IAAIC,QAAQ,KAAK,IAAjB,EAAuB;IACrB,oBAAO,QAAC,YAAD;MAAc,KAAK,EAAE;IAArB;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAnCmB,CAqCpB;;;EAEA,oBACE;IAAA,UACGA,QAAQ,CAACQ,OAAT,CAAiBC,GAAjB,CAAsBC,QAAD,IAAc;MAClC,oBACE;QAAA,uBACE;UAAA,UAAIA,QAAQ,CAACC;QAAb;UAAA;UAAA;UAAA;QAAA;MADF,GAAUD,QAAQ,CAACE,EAAnB;QAAA;QAAA;QAAA;MAAA,QADF;IAKD,CANA;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;GAlDQd,U;UACUJ,W;;;KADVI,U;AAoDT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}