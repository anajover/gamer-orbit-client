{"ast":null,"code":"var _jsxFileName = \"/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/pages/Videogames.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = \"https://api.rawg.io/api/games\";\n\nfunction Videogames() {\n  _s();\n\n  //* Pasos para llamar a la API e interactuar con el contenido\n  //! 1. Estados\n  const [allGames, setAllGames] = useState(null);\n  const [searchingData, setSearchingData] = useState(true); //! 2. Acceder al componentDidMount\n\n  useEffect(() => {\n    getVideogames();\n  }, []); //! 3. Función que llama a la API y se comunica con componentDidMount().\n\n  const getVideogames = async () => {\n    try {\n      //* 1.) Llamada a Axios\n      const response = await axios.get(`${root}?key=7442caa537d64aa4aabdf9d11167cc49`);\n      console.log(response.data); //* 2.) Actualizamos el estado con la respuesta de la API. En Axios, siempre es el \"nombreDeLaConst.data\".\n\n      setAllGames(response.data); //* 3.) Estado del spinner\n      //TODO ---> Invocación de la actualización de estado para activar el Loading \n\n      setSearchingData(false);\n    } catch (error) {\n      console.error(error);\n    }\n  }; //! 4. Crear efecto de Loading.\n\n\n  if (searchingData === null) {\n    return /*#__PURE__*/_jsxDEV(PacmanLoader, {\n      color: \"rgb(255, 154, 255)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allGames.map(eachGame => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: eachGame.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Videogames, \"ab+SxVbSz+u521miR3zsVdb6cG0=\");\n\n_c = Videogames;\nexport default Videogames;\n\nvar _c;\n\n$RefreshReg$(_c, \"Videogames\");","map":{"version":3,"names":["React","useEffect","useState","PacmanLoader","axios","root","Videogames","allGames","setAllGames","searchingData","setSearchingData","getVideogames","response","get","console","log","data","error","map","eachGame","title"],"sources":["/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/pages/Videogames.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\"\nimport axios from \"axios\";\nconst root = \"https://api.rawg.io/api/games\"\n\nfunction Videogames() {\n\n  //* Pasos para llamar a la API e interactuar con el contenido\n  //! 1. Estados\n  const [allGames, setAllGames] = useState(null)\n  const [searchingData, setSearchingData] = useState(true)\n\n  //! 2. Acceder al componentDidMount\n  useEffect(() => {\n    getVideogames();\n  }, [])\n\n  //! 3. Función que llama a la API y se comunica con componentDidMount().\n  const getVideogames = async () => {\n    try {\n      //* 1.) Llamada a Axios\n      const response = await axios.get(`${root}?key=7442caa537d64aa4aabdf9d11167cc49`);\n      console.log(response.data);\n\n      //* 2.) Actualizamos el estado con la respuesta de la API. En Axios, siempre es el \"nombreDeLaConst.data\".\n      setAllGames(response.data)\n\n      //* 3.) Estado del spinner\n      //TODO ---> Invocación de la actualización de estado para activar el Loading \n      setSearchingData(false)\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  //! 4. Crear efecto de Loading.\n  if (searchingData === null) {\n    return <PacmanLoader color={\"rgb(255, 154, 255)\"}/>\n  }\n\n  return ( \n  \n    <div>\n\n      \n        { allGames.map( (eachGame) => {\n          return (\n            <div>\n              <p>{eachGame.title}</p>\n            </div>\n          )\n        }) }\n      \n\n    </div>\n\n  )\n}\n\nexport default Videogames;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,IAAI,GAAG,+BAAb;;AAEA,SAASC,UAAT,GAAsB;EAAA;;EAEpB;EACA;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD,CALoB,CAOpB;;EACAD,SAAS,CAAC,MAAM;IACdU,aAAa;EACd,CAFQ,EAEN,EAFM,CAAT,CARoB,CAYpB;;EACA,MAAMA,aAAa,GAAG,YAAY;IAChC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAER,IAAK,uCAAlB,CAAvB;MACAS,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB,EAHE,CAKF;;MACAR,WAAW,CAACI,QAAQ,CAACI,IAAV,CAAX,CANE,CAQF;MACA;;MACAN,gBAAgB,CAAC,KAAD,CAAhB;IAED,CAZD,CAYE,OAAOO,KAAP,EAAc;MACdH,OAAO,CAACG,KAAR,CAAcA,KAAd;IACD;EACF,CAhBD,CAboB,CA+BpB;;;EACA,IAAIR,aAAa,KAAK,IAAtB,EAA4B;IAC1B,oBAAO,QAAC,YAAD;MAAc,KAAK,EAAE;IAArB;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBAEE;IAAA,UAGMF,QAAQ,CAACW,GAAT,CAAeC,QAAD,IAAc;MAC5B,oBACE;QAAA,uBACE;UAAA,UAAIA,QAAQ,CAACC;QAAb;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF;IAKD,CANC;EAHN;IAAA;IAAA;IAAA;EAAA,QAFF;AAiBD;;GArDQd,U;;KAAAA,U;AAuDT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}