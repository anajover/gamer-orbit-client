{"ast":null,"code":"var _jsxFileName = \"/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/components/IsPrivate.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/auth.context.js\"; //! Ponemos en práctica el uso de HOC o Higher Order Components.\n// Este componente va a recibir props... ++\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction IsPrivate(props) {\n  _s();\n\n  const {\n    isLoggedIn\n  } = useContext(AuthContext);\n\n  if (isLoggedIn === true) {\n    // ++ ...Además, no renderizará nada, lo unico que retornará sera props.children.\n    // Este componente recibe props, recibe el componente que está englobando y lo retorna.\n    return props.children;\n  } else {\n    // No puedo hacer un navigate nada más cargar el componente funcional (la base del componente) como hacíamos en otros casos.\n    // Por tanto, entra en juego el elemento de React Router Dom \"Navigate\". Funciona similar a useNavigate pero podemos usarlo en estas ocasiones.\n    return /*#__PURE__*/_jsxDEV(Navigate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(IsPrivate, \"YQDvrObFZZ3nfdHviwq8QMSm/b0=\");\n\n_c = IsPrivate;\nexport default IsPrivate;\n\nvar _c;\n\n$RefreshReg$(_c, \"IsPrivate\");","map":{"version":3,"names":["useContext","Navigate","AuthContext","IsPrivate","props","isLoggedIn","children"],"sources":["/Users/pelayotrives/Desktop/ironhack-material/modulo3/dia7/gamer-orbit-client/src/components/IsPrivate.jsx"],"sourcesContent":["import { useContext } from \"react\"\nimport { Navigate } from \"react-router-dom\"\nimport {AuthContext} from \"../context/auth.context.js\"\n\n//! Ponemos en práctica el uso de HOC o Higher Order Components.\n// Este componente va a recibir props... ++\n\nfunction IsPrivate(props) {\n\n  const {isLoggedIn} = useContext(AuthContext)\n\n  if (isLoggedIn === true) {\n    // ++ ...Además, no renderizará nada, lo unico que retornará sera props.children.\n    // Este componente recibe props, recibe el componente que está englobando y lo retorna.\n    return props.children\n  } else {\n    // No puedo hacer un navigate nada más cargar el componente funcional (la base del componente) como hacíamos en otros casos.\n    // Por tanto, entra en juego el elemento de React Router Dom \"Navigate\". Funciona similar a useNavigate pero podemos usarlo en estas ocasiones.\n    return <Navigate></Navigate>\n  }\n    \n  \n}\n\nexport default IsPrivate"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAAQC,WAAR,QAA0B,4BAA1B,C,CAEA;AACA;;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAAA;;EAExB,MAAM;IAACC;EAAD,IAAeL,UAAU,CAACE,WAAD,CAA/B;;EAEA,IAAIG,UAAU,KAAK,IAAnB,EAAyB;IACvB;IACA;IACA,OAAOD,KAAK,CAACE,QAAb;EACD,CAJD,MAIO;IACL;IACA;IACA,oBAAO,QAAC,QAAD;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;AAGF;;GAfQH,S;;KAAAA,S;AAiBT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}